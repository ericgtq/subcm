export const config = { compatibility_date: "2025-09-01" };
const _b64 = "";

function decodeBase64(b64) {
  return (typeof atob === "function")
    ? atob(b64)
    : Buffer.from(b64, "base64").toString("utf8");
}

function transformToIIFE(src) {
  // 1) 去掉 BOM
  if (src.charCodeAt(0) === 0xFEFF) src = src.slice(1);

  // 2) 去掉 shebang（以防万一）
  src = src.replace(/^#!.*/ , "");

  // 3) 如果已经是 IIFE（我们自己的标记：return __EXPORT__），直接返回
  if (/\breturn\s+__EXPORT__\s*;/.test(src)) {
    return src; // 已经转换过
  }

  // 4) 把第一处 export default 换成 const __EXPORT__ =
  //    只替换顶层第一处即可；你的源码只有一次默认导出
  const replaced = src.replace(/^\s*export\s+default\s+/m, "const __EXPORT__ = ");

  // 5) 包成 IIFE，并返回 __EXPORT__（供 new Function 调用时直接得到对象）
  //    注意这里不要额外加分号到表达式外面
  const wrapped =
    `(function(){\n"use strict";\n` +
    replaced +
    `\nreturn __EXPORT__;\n})();`;

  return wrapped;
}

function _lift(b64) {
  const raw = decodeBase64(b64);
  const code = transformToIIFE(raw); // 关键：把“含 export default 的源码”改成 IIFE
  // 让 code 作为一个表达式被 return，得到 { fetch(){…} } 对象
  const factory = new Function('"use strict"; return ' + code);
  return factory();
}

const app = _lift(_b64);

// Pages 的 _worker.js 需要默认导出 fetch
export default {
  async fetch(request, env, ctx) {
    return app.fetch(request, env, ctx);
  }
};

